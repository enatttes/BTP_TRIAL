managed; //implementation in class zbp_r_travel_enb_tp unique;
strict ( 2 );
with draft;

define behavior for ZR_Travel_Enb_TP alias travel
implementation in class zbp_travel_enb unique
persistent table ztb_travel_en
draft table ztb_travel_en_d
lock master
total etag LastChangedAt
authorization master ( global, instance )
etag master LocalLastChangedAt
{ create ( precheck );
  update ( precheck );
  delete;
  association _Booking { create ( features : instance, authorization : update ); with draft; }

  field ( numbering : managed, readonly:update ) TravelUuid;
  field ( readonly ) TravelId, OverallStatus, TotalPrice, LocalCreatedAt, LocalCreatedBy, LocalLastChangedAt, LocalLastChangedBy, LastChangedAt;
  field ( mandatory ) CustomerId, AgencyId, BeginDate, EndDate, CurrencyCode;
  field ( features : instance ) BookingFee;

  action ( features : instance, authorization : update ) acceptTravel result [1] $self;
  action ( features : instance, authorization : update ) rejectTravel result [1] $self;
  action ( features : instance, authorization : update ) deductDiscount parameter /dmo/a_travel_discount result [1] $self { default function GetDefaultsFordeductDiscount; }
  internal action reCalcTotalPrice;

  determination setTravelNumber on save { create; }
  determination setStatusToOpen on modify { create; }
  determination calculateTotalPrice on modify { create; field BookingFee, CurrencyCode; }

  validation validateCustomer on save { create; field CustomerId; }
  validation validateAgency on save { create; field AgencyId; }
  validation validateDates on save { create; field BeginDate, EndDate; }
  validation validateCurrencyCode on save { create; field CurrencyCode; }
  validation validateBookingFee on save { create; field BookingFee; }

  determine action validateAgencyID { validation validateAgency; }
  determine action validateCustomerID { validation validateCustomer; }
  determine action validateDateRange { validation validateDates; }
  determine action validateBookingCharge { validation validateBookingFee; }

  //Validaciones en tiempo de ejecuciÃ³n
  side effects
    //Cambia Tarifa, se recalcula el precio total
  { field BookingFee affects field TotalPrice;
    //Cambios en Agencia de viajes se valida -> puede generar menasajes de error
    determine action validateAgencyID executed on field AgencyID affects messages;
    determine action validateCustomerID executed on field CustomerID affects messages;
    determine action validateDateRange executed on field BeginDate, field EndDate affects messages;
    determine action validateBookingCharge executed on field BookingFee affects messages; }


  draft action Resume with additional implementation;
  draft action Edit;
  draft action Activate optimized;
  draft action Discard;

  draft determine action Prepare
  { validation validateAgency;
    validation validateCustomer;
    validation validateDates;
    validation validateCurrencyCode;
    validation validateBookingFee;
    validation Booking~validateCustomer;
    validation Booking~validateConnection;
    validation Booking~validateCurrencyCode;
    validation Booking~validateFlightPrice;
    validation Booking~validateStatus;
    validation Bookingsupplement~validateSupplement;
    validation Bookingsupplement~validateCurrencyCode;
    validation Bookingsupplement~validatePrice; }

  mapping for ztb_travel_en
    { AgencyId           = agency_id;
      BeginDate          = begin_date;
      BookingFee         = booking_fee;
      CurrencyCode       = currency_code;
      CustomerId         = customer_id;
      Description        = description;
      EndDate            = end_date;
      LastChangedAt      = last_changed_at;
      LocalCreatedAt     = local_created_at;
      LocalCreatedBy     = local_created_by;
      LocalLastChangedAt = local_last_changed_at;
      LocalLastChangedBy = local_last_changed_by;
      OverallStatus      = overall_status;
      TotalPrice         = total_price;
      TravelId           = travel_id;
      TravelUuid         = travel_uuid; } }

define behavior for ZR_Booking_Enb_TP alias Booking
implementation in class zbp_booking_enb unique
persistent table ztb_booking_en
draft table ztb_booking_en_d
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalLastChangedAt
{ update;
  delete;
  association _BookingSupplement { create(authorization : update); with draft; }
  association _Travel { with draft;}

  field (numbering: managed, readonly) BookingUUID;
  field (readonly) TravelUUID, BookingID, BookingDate, LocalLastChangedAt;
  field (mandatory) CustomerID, AirlineID, ConnectionID, FlightDate, CurrencyCode;

  determination setBookingNumber on save {create;}
  determination setBookingDate on save {create;}
  determination calculateTotalPrice on modify {create; field FlightPrice, CurrencyCode;}

  validation validateCustomer on save {create; field CustomerId;}
  validation validateConnection on save {create; field AirlineId, ConnectionId, FlightDate;}
  validation validateCurrencyCode on save {create; field CurrencyCode;}
  validation validateFlightPrice  on save {create; field FlightPrice;}
  validation validateStatus       on save {create; field BookingStatus;}

  determine action validateFlightCosts { validation validateFlightPrice;}

  side effects
  { field FlightPrice affects field _Travel.TotalPrice;
    determine action validateFlightCosts executed on field FlightPrice affects messages; }

  mapping for ztb_booking_en
    { AirlineId          = carrier_id;
      BookingDate        = booking_date;
      BookingId          = booking_id;
      BookingStatus      = booking_status;
      BookingUuid        = booking_uuid;
      ConnectionId       = connection_id;
      CurrencyCode       = currency_code;
      CustomerId         = customer_id;
      FlightDate         = flight_date;
      FlightPrice        = flight_price;
      LocalLastChangedAt = local_last_changed_at;
      TravelUuid         = parent_uuid; } }

define behavior for ZR_BookingSupplement_Enb_TP alias BookingSupplement
implementation in class zbp_bookingsupplement_enb unique
persistent table ztb_booksup_en
draft table ztb_booksup_en_d
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalLastChangedAt
{
  update;
  delete;

  association _Travel {with draft;}
  association _Booking{with draft;}

  field (numbering: managed, readonly) BookSupplUUID;
  field (readonly) TravelUUID, BookingUUID, BookingSupplementID, LocalLastChangedAt;
  field (mandatory) SupplementID, CurrencyCode;

  determination setBookSupplNumber on save {create;}
  determination calculateTotalPrice on modify {create; field CurrencyCode, BookSupplPrice;}

  validation validateSupplement on save {create; field SupplementID;}
  validation validateCurrencyCode on save {create; field CurrencyCode;}
  validation validatePrice        on save {create; field BookSupplPrice;}

  determine action validateSupplementPrice {validation validatePrice;}

  side effects
  { field BookSupplPrice affects field _Travel.TotalPrice;
    determine action validateSupplementPrice executed on field BookSupplPrice affects messages; }

  mapping for ztb_booksup_en
    { BookSupplPrice      = price;
      BookSupplUUID       = booksuppl_uuid;
      BookingSupplementID = booking_supplement_id;
      BookingUUID         = parent_uuid;
      CurrencyCode        = currency_code;
      LocalLastChangedAt  = local_last_changed_at;
      SupplementID        = supplement_id;
      TravelUUID          = root_uuid;} }